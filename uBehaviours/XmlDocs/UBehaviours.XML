<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Invert.uBehaviours</name>
    </assembly>
    <members>
        <member name="T:UBTrigger">
            <summary>
            The component class for triggers.  This should be overriden to create a trigger.
            Write a normal MonoBehaviour and when you want it to "Trigger" simply invoke ExecuteSheet or ExecuteSheetWithVars.
            </summary>
        </member>
        <member name="M:UBTrigger.AvailableStaticVariablesByType(System.String)">
            <summary>
            This method pulls information on a trigger type.  Basically just invokes the static method that provides variable information.
            This is for internal use.
            </summary>
            <param name="triggerType">The type of trigger by its AssemblyQualifiedName</param>
            <returns></returns>
        </member>
        <member name="M:UBTrigger.ExecuteSheet">
            <summary>
            Executes the sheet that belongs to this trigger.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UBTrigger.ExecuteSheetWithVars(UBVariableBase[])" -->
        <member name="M:UBTrigger.Initialized">
            <summary>
            After the trigger has been initialized
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UBTrigger.Initialize(TriggerInfo,System.Collections.Generic.Dictionary{System.String,System.Object})" -->
        <member name="P:UBTrigger.Instance">
            <summary>
            The behaviour instance that this trigger belongs too.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UBTrigger.Sheet" -->
        <member name="T:BehaviourSetting">
            <summary>
            A behaviour setting that is applied to 
            </summary>
        </member>
        <member name="T:BehaviourError">
            <summary>
            The error class that returns when an error exists on a trigger.
            </summary>
        </member>
        <member name="T:BehaviourBreakpoint">
            <summary>
            A breakpoint notification. Used for knowing when a breakpoint is active.
            </summary>
        </member>
        <member name="T:IUBCSharpGenerator">
            <summary>
            An interface for generating code from a behaviour.
            </summary>
        </member>
        <member name="M:IUBCSharpGenerator.AddField(System.String,System.Type)">
            <summary>
            Create a field on the class being generated
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:IUBCSharpGenerator.AddInterface(System.Type)">
            <summary>
            Make this current class being generated extend from an interface
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IUBCSharpGenerator.Append(System.String)">
            <summary>
            Appends text to the current code generation method.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:IUBCSharpGenerator.AppendExpression(System.String)">
            <summary>
            Writes an expression based code to the current code generation method.  It can be anything and the variables will automatically be resolved.
            </summary>
            <param name="expressionTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:IUBCSharpGenerator.AppendFormat(System.String,System.Object[])">
            <summary>
            Similar to string.format
            </summary>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="M:IUBCSharpGenerator.AssignStatement(UBVariableBase,System.String,System.String)">
            <summary>
            A simple variable assign statement
            </summary>
            <param name="v">The UBVariable you want to assign to.</param>
            <param name="fieldName"></param>
            <param name="rightExpression"></param>
        </member>
        <member name="M:IUBCSharpGenerator.ConditionStatement(UBConditionAction,System.String,UBActionSheet,UBActionSheet)">
            <summary>
            Creates a if statement based off of an UBConditionAction
            </summary>
            <param name="ubConditionAction"></param>
            <param name="expression"></param>
            <param name="trueSheet"></param>
            <param name="falseSheet"></param>
        </member>
        <member name="M:IUBCSharpGenerator.Expression(System.String)">
            <summary>
            Returns an expression based code.  It can be anything and the variables will automatically be resolved.
            </summary>
            <param name="expressionTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:IUBCSharpGenerator.HasField(System.String)">
            <summary>
            Does a field already exist in the generating code.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IUBCSharpGenerator.InvokeTemplateSheet(System.String)">
            <summary>
            A simple method that will generate code to invoke a template
            </summary>
            <param name="templateName"></param>
            <returns>The code to execute the template sheet.</returns>
        </member>
        <member name="M:IUBCSharpGenerator.InvokeTriggerSheet(UBActionSheet)">
            <summary>
            A method that returns the code that will execute a trigger sheet.
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:IUBCSharpGenerator.VariableName(UBVariableBase,System.String)">
            <summary>
            Get a variable name that is used in the current class. Use this for any variable to ensure variables have unique names.
            </summary>
            <param name="v">The UBVariable to used</param>
            <param name="fieldName">The name of the field on the action this variable belongs to.</param>
            <returns>The variable name</returns>
        </member>
        <member name="T:IContextItem">
            <summary>
            For stack trace info.  Basically groups anything with a name
            </summary>
        </member>
        <member name="T:IUBSerializable">
            <summary>
            An interface for the custom Unity Binary Serialization
            </summary>
        </member>
        <member name="M:UBAction.Accept(IBehaviourVisitor)">
            <summary>
            The visitor pattern accept method which will make the visitor visit variables
            </summary>
            <param name="visitor">The visitor of this action</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UBAction.CheckForNotifications(IUBehaviours,TriggerInfo)" -->
        <member name="M:UBAction.Error(System.String,System.Object[])">
            <summary>
            An error helper method to easily create a IBehaviourError instance.
            </summary>
            <param name="message">The error message. Similar to string.Format</param>
            <param name="args">The format arguments</param>
            <returns>An instance of BehaviourError</returns>
        </member>
        <member name="M:UBAction.BreakPointNotification">
            <summary>
            An error helper method to easily create a IBehaviourError instance.
            </summary>
            <param name="message">The error message. Similar to string.Format</param>
            <param name="args">The format arguments</param>
            <returns>An instance of BehaviourError</returns>
        </member>
        <member name="M:UBAction.Execute(IUBContext)">
            <summary>
            Execute this action in the specified context.
            </summary>
            <param name="context">The context at which this action will execute.</param>
        </member>
        <member name="M:UBAction.GetActionSheetsFromFields">
            <summary>
            Find all the actionsheets available by this action. (Uses reflection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBAction.GetAvailableActionSheets(IUBehaviours)">
            <summary>
            Get available action sheets exposed by this with additional info.
            </summary>
            <param name="behaviours">The behaviour this exists on.</param>
            <returns>IEnumerable of UBActionSheetInfo's</returns>
        </member>
        <member name="M:UBAction.GetPath">
            <summary>
            Get the UBActionSheet's that lead to this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBAction.GetVariableFields">
            <summary>
            Gets all variable fields on this action. (Uses reflection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBAction.GetVisibleFields">
            <summary>
            Gets all visible inspector fields and returns IUBFieldInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBAction.Serialize(IReferenceHolder,UBBinarySerializer)">
            <summary>
            Serializes this action to a byte array. For internal use.
            </summary>
            <param name="referenceHolder"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:UBAction.WriteCode(IUBCSharpGenerator)">
             <summary>
             <code>
             [UBCategory("Network")]
            public class ConnectByGUID : UBAction
            {
            
                [UBRequired]
                public UBString _GUID = new UBString();
             
                [UBRequireVariable]
                [UBRequired]
                public UBEnum _Result = new UBEnum(typeof(NetworkConnectionError));
                protected override void PerformExecute(IUBContext context)
                {
                    if (_Result != null)
                    {
                        _Result.SetValue(context, Network.Connect(_GUID.GetValue(context)));
                    }
            
                }
            
                public override void WriteCode(IUBCSharpGenerator sb)
                {
                    // Append expression will automatically resolve variable names with the convention
                    // #FIELD_NAME#
                    sb.AppendExpression("Network.Connect(#_GUID#)");
                }
            
            }
             </code>
             </summary>
             <param name="sb"></param>
        </member>
        <member name="M:UBAction.PerformExecute(IUBContext)">
            <summary>
            This method should be implemented on any Derived class to execute the action in the context.
            </summary>
            <param name="context">The context in which to perform this action.</param>
        </member>
        <member name="P:UBAction.ActionSheet">
            <summary>
            The actionsheet this action belongs to
            </summary>
        </member>
        <member name="P:UBAction.Breakpoint">
            <summary>
            Is there currently a breakpoint on this action
            </summary>
        </member>
        <member name="P:UBAction.Enabled">
            <summary>
            Is this action enabled or disabled.
            </summary>
        </member>
        <member name="P:UBAction.Expanded">
            <summary>
            Is this expanded in the view
            </summary>
        </member>
        <member name="P:UBAction.IsCurrentlyActive">
            <summary>
            Is this action the currently executing action. For Debug internal use.
            </summary>
        </member>
        <member name="P:UBAction.Name">
            <summary>
            The name of this action. Defaults to "ToString()"
            </summary>
        </member>
        <member name="P:UBAction.RootContainer">
            <summary>
            The Behaviour Or Behaviour Instance that contains this.
            </summary>
        </member>
        <member name="P:UBConditionAction.TrueLabel">
            <summary>
            The label that is used for the true action sheet
            </summary>
        </member>
        <member name="P:UBConditionAction.FalseLabel">
            <summary>
            The label that is used for the false action sheet
            </summary>
        </member>
        <member name="M:IUBContext.ExecuteSheet(UBActionSheet)">
            <summary>
            Execute an action sheet in this context
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="M:IUBContext.GetVariable(System.String)">
            <summary>
            Finds a variable in the current context. Use this for runtime variable searching
            </summary>
            <param name="name">The name of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:IUBContext.GetVariableById(System.String)">
            <summary>
            Gets a variable at runtime by its id.
            </summary>
            <param name="id">The id of the variable to get.</param>
            <returns></returns>
        </member>
        <member name="M:IUBContext.GoTo(System.String)">
            <summary>
            Execute a trigger by id
            </summary>
            <param name="triggerId"></param>
        </member>
        <member name="M:IUBContext.GetVariableAs``1(System.String)">
            <summary>
            Gets a variables value by its name
            </summary>
            <param name="name">The name of the variable</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IUBContext.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variable by its name. If it doesn't exist it will be created
            </summary>
            <param name="variableName"></param>
            <param name="value"></param>
        </member>
        <member name="M:IUBContext.SetVariableById(System.String,System.Object)">
            <summary>
            Sets a variable by its id
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:IUBContext.SetVariable(UBVariableBase)">
            <summary>
            Sets a variable.  If it already exists it will replace the value with the new one.
            </summary>
            <param name="variableDeclare"></param>
        </member>
        <member name="M:UBComponent.InitializeTrigger(TriggerInfo,IUBehaviours)">
            <summary>
            Initialize a trigger with TriggerInfo
            </summary>
            <param name="trigger"></param>
            <param name="behaviour"></param>
        </member>
        <member name="M:UBComponent.InitializeContext">
            <summary>
            Initializes this as the context for actions executed on this behaviour.
            This initializes all variables from Globals,Incldues,Overrides, and Declares
            </summary>
        </member>
        <member name="T:IUBehaviours">
            <summary>
            A base interface for A Behaviour.  This could be a scriptableobject or a component.
            </summary>
        </member>
        <member name="M:IUBehaviours.CreateSheet(System.String,UBActionSheet)">
            <summary>
            Create an action sheet that belongs to this behaviour.
            </summary>
            <param name="name">The name of the actionsheet to create.</param>
            <param name="parent">The parent sheet if any</param>
            <returns>The sheet that has been created.</returns>
        </member>
        <member name="M:IUBehaviours.FindDeclare(System.String,TriggerInfo)">
            <summary>
            Find a declared variable.  This is for design time use only.  
            These variables will be pushed into the Variables collection at runtime.
            </summary>
            <param name="variableGuid">The declares identifier.</param>
            <param name="trigger">If there is any trigger info pass it along too.</param>
            <returns>The declare with 'variableGuid'</returns>
        </member>
        <member name="M:IUBehaviours.FindSheet(System.String)">
            <summary>
            Finds an actionsheet that belongs to this behaviour
            </summary>
            <param name="guid">The guid of the sheet to find.</param>
            <returns>The sheet with 'guid'</returns>
        </member>
        <member name="M:IUBehaviours.FindTriggerById(System.String)">
            <summary>
            Finds a trigger by its GUID.
            </summary>
            <param name="triggerId">The GUID of the trigger to find</param>
            <returns>The sheet with 'triggerId'</returns>
        </member>
        <member name="M:IUBehaviours.FindTriggerByName(System.String)">
            <summary>
            Finds a trigger by its Name.
            </summary>
            <param name="triggerName">The Name of the trigger to find</param>
            <returns>The sheet with 'triggerName'</returns>
        </member>
        <member name="M:IUBehaviours.GetAllTriggers">
            <summary>
            Gets all the available triggers including "Includes"
            </summary>
            <returns></returns>
        </member>
        <member name="M:IUBehaviours.GetIncludedDeclares">
            <summary>
            Get any static variables that belong to this behaviour. These are known variables that are programtically loaded.
            </summary>
            <param name="list"></param>
            <returns>All of the available predefined variables</returns>
        </member>
        <member name="M:IUBehaviours.GetTriggerGroups">
            <summary>
            The instance triggers that are custom
            </summary>
            <returns></returns>
        </member>
        <member name="P:IUBehaviours.Declares">
            <summary>
            The declared variables that are created in the editor.  
            If you want to modify the variables at runtime use "Variables"
            </summary>
        </member>
        <member name="P:IUBehaviours.Includes">
            <summary>
            The included behaviours that should also apply to this behaviour.
            </summary>
        </member>
        <member name="P:IUBehaviours.Sheets">
            <summary>
            The Sheets that exist on any action that belongs to this behaviour.
            </summary>
        </member>
        <member name="P:IUBehaviours.Triggers">
            <summary>
            The triggers that will execute and belong strictly to this behviour. To get included triggers use GetAllTriggers()
            </summary>
        </member>
        <member name="P:IUBehaviours.Settings">
            <summary>
            The settings that are applied to this behaviour.  Each setting will be passed to every trigger for use.
            </summary>
        </member>
        <member name="P:IUBehaviours.SettingsDictionary">
            <summary>
            A lazy-loaded dictionary for easy access of settings.  This directly represents the Settings Property
            </summary>
        </member>
        <member name="T:UBActionSheet">
            <summary>
            This is a class that contains actions.  It is the main class for executing a sequence of actions.
            </summary>
        </member>
        <member name="M:UBActionSheet.Accept(IBehaviourVisitor)">
            <summary>
            This will traverse the actionsheet invoking corresponding methods on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:UBActionSheet.AddItem(UBAction)">
            <summary>
            Adds a action to this sheet.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UBActionSheet.CheckForNotifications(IUBehaviours)">
            <summary>
            Check all actions for notifications.  This could be an error or notifying that  breakpoint exists.
            </summary>
            <param name="behaviour">The behaviour that this actionsheet belongs to or at which to search for notifications.</param>
            <returns></returns>
        </member>
        <member name="M:UBActionSheet.CheckForNotifications(IUBehaviours,TriggerInfo)">
            <summary>
            Check all actions for notifications.  This could be an error or notifying that  breakpoint exists.
            </summary>
            <param name="behaviour">The behaviour that this actionsheet belongs to or at which to search for notifications.</param>
            <param name="trigger">The trigger that this sheet belongs to if any.</param>
            <returns></returns>
        </member>
        <member name="M:UBActionSheet.Execute(IUBContext)">
            <summary>
            Executes the action sheet with in a given context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:UBActionSheet.Load(IUBehaviours,TriggerInfo)">
            <summary>
            Loads all of the byte data stored on this object and correctly assigns runtime variables needed for execution.
            This is used internally and shouldn't be invoked or it might undesired results.
            </summary>
            <param name="behaviour">The behaviour that this action sheet belongs to and the context to load it in.</param>
            <param name="trigger">The trigger info to load with this action sheet if any.</param>
        </member>
        <member name="M:UBActionSheet.Load(IUBehaviours)">
            <summary>
            Loads all of the byte data stored on this object and correctly assigns runtime variables needed for execution.
            This is used internally and shouldn't be invoked or it might undesired results.
            </summary>
            <param name="behaviour">The behaviour that this action sheet belongs to and the context to load it in.</param>
        </member>
        <member name="P:UBActionSheet.ExecutionHandler">
            <summary>
            This is the ExecutionHandler that will execute any actionsheet.
            </summary>
        </member>
        <member name="P:UBActionSheet.Actions">
            <summary>
            The actions that belong to this actionsheet
            </summary>
        </member>
        <member name="P:UBActionSheet.ForwardTo">
            <summary>
            If the sheet forwards to another trigger this will contain the info for the trigger. Otherwise null
            </summary>
        </member>
        <member name="P:UBActionSheet.FullName">
            <summary>
            The full name gets the path to this action sheet.
            </summary>
        </member>
        <member name="P:UBActionSheet.Guid">
            <summary>
            An identifier for the ActionSheet
            </summary>
        </member>
        <member name="P:UBActionSheet.IsActive">
            <summary>
            Is this visible when collapsed.
            </summary>
        </member>
        <member name="P:UBActionSheet.IsForward">
            <summary>
            Are we currently forwarding to another Trigger?
            </summary>
        </member>
        <member name="P:UBActionSheet.Name">
            <summary>
            The name of this actionsheet.
            </summary>
        </member>
        <member name="P:UBActionSheet.Parent">
            <summary>
            The actionsheet that parents this actionsheet or the action's parent of this actionsheet.
            </summary>
        </member>
        <member name="P:UBActionSheet.Path">
            <summary>
            The path to this actionsheet
            </summary>
        </member>
        <member name="P:UBActionSheet.RootContainer">
            <summary>
            The behaviour that contains this sheet.
            </summary>
        </member>
        <member name="P:UBActionSheet.SheetPath">
            <summary>
            Gets each actionsheet leading up to this sheet in the flow.
            </summary>
        </member>
        <member name="P:UBActionSheet.TriggerInfo">
            <summary>
            The trigger info that this actionsheet belongs to
            </summary>
        </member>
        <member name="M:UBActionSheetInfo.Clear(System.Object)">
            <summary>
            Clears the action sheet on the target.
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:UBActionSheetInfo.ArrayIndex">
            <summary>
            If the field is an array what index does the Sheet exist
            </summary>
        </member>
        <member name="P:UBActionSheetInfo.Field">
            <summary>
            The field info the field that is of type UBActionSheet this can be an array of UBActionSheet as well.
            </summary>
        </member>
        <member name="P:UBActionSheetInfo.Name">
            <summary>
            The Name of the field
            </summary>
        </member>
        <member name="P:UBActionSheetInfo.Owner">
            <summary>
            The action that owns the action sheet.
            </summary>
        </member>
        <member name="P:UBActionSheetInfo.Sheet">
            <summary>
            The sheet value if it exists
            </summary>
        </member>
        <member name="T:UBSharedBehaviour">
            <summary>
            Represents a UBehaviour Data file that can be included into UBInstances.
            </summary>
        </member>
        <member name="M:UBSharedBehaviour.FindTriggerById(System.String)">
            <summary>
            Finds a trigger by its string guid.
            </summary>
            <param name="triggerId">The id of the trigger to find.</param>
            <returns></returns>
        </member>
        <member name="M:UBSharedBehaviour.FindTriggerByName(System.String)">
            <summary>
            Finds a trigger by name
            </summary>
            <param name="triggerName"></param>
            <returns></returns>
        </member>
        <member name="M:UBSharedBehaviour.GetAllTriggers">
            <summary>
            Gets all the available triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.IBehaviourVisitable#Accept(IBehaviourVisitor)">
            <summary>
            The accept method for the visitor pattern.  Create a IBehaviourVisitor if you want to easily iterate over everything in a behaviour
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:UBInstanceBehaviour.Awake">
            <summary>
            Initialize the context with variables from includes and declared variables.
            Also Initializes each trigger onto the instance.
            </summary>
        </member>
        <member name="M:UBInstanceBehaviour.CreateSheet(System.String,UBActionSheet)">
            <summary>
            Create an action sheet that belongs to this behaviour.
            </summary>
            <param name="name">The name of the actionsheet to create.</param>
            <param name="parent">The parent sheet if any</param>
            <returns>The sheet that has been created.</returns>
        </member>
        <member name="M:UBInstanceBehaviour.ExecuteSheet(UBActionSheet)">
            <summary>
            Executes an ActionSheet with this as the context.
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="M:UBInstanceBehaviour.FindDeclare(System.String,TriggerInfo)">
            <summary>
            Searches declares and static variables for the variable.
            </summary>
            <param name="guid">The Identifier of the variable to search for.  If static use the name.</param>
            <param name="trigger">The trigger to search if any.</param>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.FindSheet(System.String)">
            <summary>
            Search all sheets and sheets that belong to triggers by the specified id.
            </summary>
            <param name="guid">The guid of the sheet to find.</param>
            <returns>The sheet with 'guid'</returns>
        </member>
        <member name="M:UBInstanceBehaviour.FindTriggerById(System.String)">
            <summary>
            Find a trigger by its id.
            </summary>
            <param name="triggerId">The guid of the trigger to find.</param>
            <returns>The trigger with 'triggerId'</returns>
        </member>
        <member name="M:UBInstanceBehaviour.FindTriggerByName(System.String)">
            <summary>
            Find a trigger by its name.
            </summary>
            <param name="triggerName">The name of the trigger to find.</param>
            <returns>The trigger with 'triggerName'</returns>
        </member>
        <member name="M:UBInstanceBehaviour.FindTemplateTriggerByName(System.String)">
            <summary>
            Find a template trigger by its name.
            </summary>
            <param name="triggerName">The name of the trigger to find.</param>
            <returns>The trigger with 'triggerName'</returns>
        </member>
        <member name="M:UBInstanceBehaviour.GetAllTriggers">
            <summary>
            Gets all the available triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.GetIncludedTriggers">
            <summary>
            Get any predefined triggers that belongs to this behaviour
            </summary>
            <returns>All of the predefined triggers.</returns>
        </member>
        <member name="M:UBInstanceBehaviour.FillIncludedDeclares(System.Collections.Generic.List{IUBVariableDeclare})">
            <summary>
            Get any static variables that belong to this behaviour. These are known variables that are programtically loaded.
            </summary>
            <param name="list"></param>
            <returns>All of the available predefined variables</returns>
        </member>
        <member name="M:UBInstanceBehaviour.InitializeContext">
            <summary>
            Initializes this as the context for actions executed on this behaviour.
            This initializes all variables from Globals,Incldues,Overrides, and Declares
            </summary>
        </member>
        <member name="M:UBInstanceBehaviour.InitializeTrigger(TriggerInfo,IUBehaviours)">
            <summary>
            Initialize a trigger with TriggerInfo
            </summary>
            <param name="trigger"></param>
            <param name="behaviour"></param>
        </member>
        <member name="M:UBInstanceBehaviour.GetVariable(System.String)">
            <summary>
            Finds a variable in the current context. Use this for runtime variable searching
            </summary>
            <param name="name">The name of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.GetVariableById(System.String)">
            <summary>
            Gets a variable at runtime by its id.
            </summary>
            <param name="id">The id of the variable to get.</param>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.GoTo(System.String)">
            <summary>
            Execute a trigger by id
            </summary>
            <param name="triggerId"></param>
        </member>
        <member name="M:UBInstanceBehaviour.GetVariableAs``1(System.String)">
            <summary>
            Gets a variables value by its name
            </summary>
            <param name="name">The name of the variable</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UBInstanceBehaviour.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variable by its name
            </summary>
            <param name="variableName"></param>
            <param name="value"></param>
        </member>
        <member name="M:UBInstanceBehaviour.SetVariableById(System.String,System.Object)">
            <summary>
            Sets a variable by its id
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="P:UBInstanceBehaviour.SettingsDictionary">
            <summary>
            A lazy-loaded dictionary for easy access of settings.  This directly represents the Settings Property
            </summary>
        </member>
        <member name="P:UBInstanceBehaviour.Declares">
            <summary>
            The declared variables that are created in the editor.  
            If you want to modify the variables at runtime use "Variables"
            </summary>
        </member>
        <member name="P:UBInstanceBehaviour.Includes">
            <summary>
            The included behaviours that should also apply to this behaviour.
            </summary>
        </member>
        <member name="P:UBInstanceBehaviour.Sheets">
            <summary>
            The Sheets that exist on any action that belongs to this behaviour.
            </summary>
        </member>
        <member name="P:UBInstanceBehaviour.Triggers">
            <summary>
            The triggers that will execute and belong strictly to this behviour. To get included triggers use GetAllTriggers()
            </summary>
        </member>
        <member name="P:UBInstanceBehaviour.IUBehaviours#Settings">
            <summary>
            The settings that are applied to this behaviour.  Each setting will be passed to every trigger for use.
            </summary>
        </member>
        <member name="T:TriggerInfo">
            <summary>
            Trigger information
            </summary>
        </member>
        <member name="P:TriggerInfo.Data">
            <summary>
            Data that can be used if the trigger is predefined.
            </summary>
        </member>
        <member name="P:TriggerInfo.DisplayName">
            <summary>
            The name that is displayed without any spaces
            </summary>
        </member>
        <member name="P:TriggerInfo.Guid">
            <summary>
            The identifier for this trigger.
            </summary>
        </member>
        <member name="P:TriggerInfo.Sheet">
            <summary>
            The sheet that belongs to this trigger.
            </summary>
        </member>
        <member name="P:TriggerInfo.TriggerType">
            <summary>
            The type of trigger that will be created upon load.
            </summary>
        </member>
        <member name="P:TriggerInfo.TriggerTypeName">
            <summary>
            The string type name of the triggertype.
            </summary>
        </member>
        <member name="T:UBVariableBase">
            <summary>
            All UB Variables derive from this.  Even UBVariableDeclare.
            These variables can be accessed in context and also store information about how the variable resolves its value.
            It keeps track of variable references
            </summary>
        </member>
        <member name="M:UBVariableBase.CheckForErrors(IUBehaviours,UBAction,TriggerInfo,System.Boolean)">
            <summary>
            Check if there are any errors on this variable. Return null if none.
            </summary>
            <param name="container">The source Behaviour</param>
            <param name="action">The action that contains this variable</param>
            <param name="required"></param>
            <param name="isRequired">Is this variable a required variable via UBRequiredAttrbute.</param>
            <returns>Returns a string with the error message. Will be null if there are no errors.</returns>
        </member>
        <member name="M:UBVariableBase.CreateAsDeclare">
            <summary>
            Convert this variable to a declared variable.
            </summary>
            <returns>The declared variable</returns>
        </member>
        <member name="M:UBVariableBase.Deserialize(IReferenceHolder,UBBinarySerializer)">
            <summary>
            Deserialize this variable from a byte array using the serializer.
            </summary>
            <param name="referenceHolder">The referenceHolder to restore references to UnityEngine.Object's</param>
            <param name="serializer">the binary serializer/deserializer</param>
        </member>
        <member name="M:UBVariableBase.DeserializeValue(IReferenceHolder,UBBinarySerializer)">
            <summary>
            Override this method to actually deserialize the LiteralObjectValue. Only invoked when ValueFrom is equal to zero.
            </summary>
            <param name="referenceHolder">The referenceHolder to restore references to UnityEngine.Object's</param>
            <param name="serializer">The binary serializer/deserializer</param>
        </member>
        <member name="M:UBVariableBase.ToString(IUBehaviours)">
            <summary>
            Convert this variable into a friendly string.  If its a variable return the name.  If its a literal return that
            </summary>
            <returns>A pretty title for this variable.</returns>
        </member>
        <member name="M:UBVariableBase.GetObjectValue(IUBContext)">
            <summary>
            Get the actual runtime value of this variable based off of GetObjectValue
            </summary>
            <param name="context">The context at which to get reference variables or access other context sensitive data.</param>
            <returns>The value</returns>
        </member>
        <member name="M:UBVariableBase.GetReferenceDeclare(UBAction,IUBehaviours)">
            <summary>
            Grabs the reference variable.
            </summary>
            <param name="action">The action this variable belongs to.</param>
            <param name="instance">The behaviour the action belongs to.</param>
            <returns>The declare that this variable references.</returns>
        </member>
        <member name="M:UBVariableBase.GetReferenceIfUsed(UBAction)">
            <summary>
            If this variable is reference return the reference.  Otherwise return this;
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:UBVariableBase.GetValueFromOptions(IUBehaviours,UBAction,IUBVariableDeclare[])">
            <summary>
            Wrapper for FillValueFromOptions to return a dictionary.
            </summary>
            <returns>Aictionary of the available "ValueFrom" possibilities.</returns>
        </member>
        <member name="M:UBVariableBase.SetObjectValue(IUBContext,System.Object)">
            <summary>
            Set the object value in the context.
            </summary>
            <param name="context">The context of the value.</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:UBVariableBase.FillValueFromOptions(IUBVariableDeclare[])">
            <summary>
            Override this to extend various options from ValueFrom. But there must be options for 0 and 1
            0=Literal/Specified
            1=Reference To Another Variable
            </summary>
            <param name="contextVariables"></param>
        </member>
        <member name="P:UBVariableBase.Guid">
            <summary>
            The unique identifier for this variable.  If you know the variable name will be Unique you can override
            to use just a Name. Usually that would be in the case of static variable declares manually created.
            </summary>
        </member>
        <member name="P:UBVariableBase.LiteralObjectValue">
            <summary>
            The literal underlying object value of this variable.
            The ValueFrom must equal "0" for this value to be used in context.
            </summary>
        </member>
        <member name="P:UBVariableBase.Name">
            <summary>
            The name of this variable.
            </summary>
        </member>
        <member name="P:UBVariableBase.ValueFrom">
            <summary>
            How should the value be resolved?
            </summary>
        </member>
        <member name="P:UBVariableBase.ValueType">
            <summary>
            The type of value that this UBVariable encapsulates
            </summary>
        </member>
        <member name="P:UBVariableBase.VarType">
            <summary>
            The UB Variable Type that this variable encapsulates.
            </summary>
        </member>
        <member name="M:UBVariable`1.GetValue(IUBContext)">
            <summary>
            Gets the value of the variable in the context.
            </summary>
            <param name="context">The context at which to find the variable if referenced.</param>
            <returns>The value of this variable</returns>
        </member>
        <member name="M:UBVariable`1.SetValue(IUBContext,`0)">
            <summary>
            Set the value of this variable.
            </summary>
            <param name="context">The context at which to set the value.  This is only needed if the variable is referenced.</param>
            <param name="value">The value to set on this variable or its referenced variable.</param>
        </member>
        <member name="P:UBVariable`1.LiteralValue">
            <summary>
            The Value of the variable typed.
            </summary>
        </member>
        <member name="P:UBVariable`1.ValueType">
            <summary>
            The type of value of this variable
            </summary>
        </member>
    </members>
</doc>
